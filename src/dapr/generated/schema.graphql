schema {
  query: Query
  mutation: Mutation
}

"This is a basket item. Multiple items form the shopping basket for a customer."
type BasketItem @source(name: "BasketItem", schema: "basket") {
  "Unique Id of the basket item"
  basketItemId: Int!
  "Customer to basket item relation"
  customerId: Int!
  "Product to basket item relation"
  productId: Int!
  "Quantity of the product in the basket item"
  quantity: Int!
  "delegates the name of the product in the basket from product"
  name: String @delegate(schema: "product", path: "product(id: $fields:productId).name")
  "delegates the description of the product in the basket from product"
  description: String @delegate(schema: "product", path: "product(id: $fields:productId).description")
  "delegates the unit price of the product"
  unitPrice: Float @delegate(schema: "product", path: "product(id: $fields:productId).unitPrice")
  "delegates the available stock of the product in the basket from the inventory"
  inStock: Int @delegate(schema: "inventory", path: "inventory(id: $fields:productId).quantity")
}

type Customer @source(name: "Customer", schema: "customer") {
  customerId: Int!
  name: String
  birthdate: DateTime!
  username: String
}

type Inventory @source(name: "Inventory", schema: "inventory") {
  productId: Int!
  quantity: Int!
}

type Mutation {
  upsertBasketItem(input: UpsertBasketItemInput): UpsertBasketItemResult @delegate(schema: "basket")
}

type Payment @source(name: "Payment", schema: "payment") {
  paymentId: Int!
  basketId: Int!
  customerId: Int!
  total: Float!
}

type Product @source(name: "Product", schema: "product") {
  productId: Int!
  name: String
  description: String
  unitPrice: Float!
}

type Query {
  "Gets all baskets"
  baskets: [BasketItem] @delegate(schema: "basket")
  "Gets a basket item on primary key"
  basketItem(id: Int!): BasketItem @delegate(schema: "basket")
  "Gets a basket items for a customer by customer identity"
  basketForCustomer(id: Int!): [BasketItem] @delegate(schema: "basket")
  customers: [Customer] @delegate(schema: "customer")
  customer(id: Int!): Customer @delegate(schema: "customer")
  get: [Inventory] @delegate(schema: "inventory")
  inventory(id: Int!): Inventory @delegate(schema: "inventory")
  payments: [Payment] @delegate(schema: "payment")
  product(id: Int!): Payment @delegate(schema: "payment")
  products: [Product] @delegate(schema: "product")
  product_product(id: Int!): Product @delegate(schema: "product", path: "product(id: $arguments:id)")
  "This is an extended query which shows a basket for the current logged in customer along with the products. This view is in accordance with the UX design and contains delegated fields from the inventory and product database"
  mybasket: [BasketItem!]! @delegate(schema: "basket", path: "basketForCustomer(id: 1)")
}

type UpsertBasketItemResult @source(name: "UpsertBasketItemResult", schema: "basket") {
  id: Int!
  customerId: Int!
  productId: Int!
  quantity: Int!
}

input UpsertBasketItemInput @source(name: "UpsertBasketItemInput", schema: "basket") {
  id: Int!
  customerId: Int!
  productId: Int!
  quantity: Int!
}

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @delegate(path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL serviceâ€™s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name